{"version":3,"sources":["MintCountdown.tsx","MintButton.tsx","Home.tsx","App.tsx","reportWebVitals.ts","index.tsx","utils.ts","connection.tsx","candy-machine.ts"],"names":["useStyles","makeStyles","theme","createStyles","root","display","padding","spacing","margin","width","height","flexDirection","alignContent","alignItems","justifyContent","background","color","borderRadius","fontSize","done","marginBottom","fontWeight","item","MintCountdown","date","status","style","onComplete","classes","renderer","days","hours","minutes","seconds","completed","className","Paper","elevation","CTAButton","styled","Button","MintButton","onMint","candyMachine","isMinting","setIsMinting","isActive","wallet","useWallet","connection","useConnection","useState","verified","setVerified","useGateway","requestGatewayToken","gatewayStatus","webSocketSubscriptionId","setWebSocketSubscriptionId","clicked","setClicked","useEffect","mint","removeAccountChangeListener","previousGatewayStatus","value","ref","useRef","current","usePrevious","fromStates","GatewayStatus","NOT_REQUESTED","REFRESH_TOKEN_REQUIRED","invalidToStates","UNKNOWN","find","state","console","log","disabled","onClick","gatekeeper","network","gatekeeperNetwork","toBase58","ACTIVE","findGatewayToken","publicKey","gatewayToken","isValid","window","open","getGatewayTokenAddressForOwnerAndGatekeeperNetwork","gatewayTokenAddress","onGatewayTokenChange","Error","variant","isSoldOut","CircularProgress","isPresale","isWhitelistOnly","require","ConnectButton","WalletDialogButton","StyledPaper","MintContainer","div","getCountdownDate","currentShift","endSettings","endSettingType","toDate","number","goLiveDate","anchor","toNumber","Date","getTime","undefined","Home","props","animatedBg","isUserMinting","setIsUserMinting","setCandyMachine","message","severity","alertState","setAlertState","setIsActive","setCurrentShift","endDate","setEndDate","itemsRemaining","setItemsRemaining","isWhitelistUser","setIsWhitelistUser","setIsPresale","isValidBalance","setIsValidBalance","discountPrice","setDiscountPrice","needTxnSplit","setNeedTxnSplit","setupTxn","setSetupTxn","rpcUrl","rpcHost","anchorWallet","useMemo","signAllTransactions","signTransaction","refreshCandyMachineState","useCallback","commitment","Connection","candyMachineId","getCandyMachineState","cndy","getSlot","currentSlot","getBlockTime","blockTime","shift","active","presale","isWLUser","userPrice","price","whitelistMintSettings","PublicKey","getAtaForMint","token","getTokenAccountBalance","balance","parseInt","amount","tokenMint","valid","gte","getBalance","limit","Math","min","itemsAvailable","itemsRedeemed","getCollectionPDA","collectionPDA","getAccountInfo","collectionPDAAccount","txnEstimate","retainAuthority","mode","burnEveryTime","expireOnUse","hideDuration","startsWith","beforeTransactions","afterTransactions","document","getElementById","click","connected","program","createAccountsForMint","setupMint","err","transaction","awaitTransactionSignatureConfirmation","txTimeout","mintOneToken","mintResult","metadataStatus","mintTxId","provider","metadataKey","remaining","msg","code","location","reload","indexOf","toggleMintButton","now","loop","setTimeout","src","alt","Box","minHeight","Container","maxWidth","position","Grid","container","direction","wrap","xs","Typography","formatNumber","asNumber","align","CANDY_MACHINE_PROGRAM","clusterUrl","WalletAdapterNetwork","Devnet","handleTransaction","signatures","sig","equals","sendTransaction","error","broadcastTransaction","options","autoShowModal","val","Snackbar","autoHideDuration","onClose","Alert","createTheme","palette","type","process","e","getCandyMachineId","App","endpoint","clusterApiUrl","wallets","getPhantomWallet","getSolflareWallet","getSlopeWallet","getSolletWallet","getSolletExtensionWallet","ThemeProvider","ConnectionProvider","WalletProvider","autoConnect","DEFAULT_TIMEOUT","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","numberFormater","Intl","NumberFormat","minimumFractionDigits","maximumFractionDigits","format","LAMPORTS_PER_SOL","SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID","CIVIC","buyer","findProgramAddress","toBuffer","TOKEN_PROGRAM_ID","getNetworkExpire","Buffer","from","getNetworkToken","SequenceType","getErrorForTransaction","txid","confirmTransaction","getParsedConfirmedTransaction","tx","errors","meta","logMessages","forEach","m","regex","exec","index","lastIndex","length","push","sendTransactions","instructionSet","signersSet","sequenceType","Parallel","successCallback","ind","failCallback","block","WalletNotConnectedError","unsignedTxns","getRecentBlockhash","i","instructions","signers","Transaction","instruction","add","recentBlockhash","blockhash","setSigners","map","s","partialSign","partiallySignedTransactions","filter","t","fullySignedTransactions","signedTxns","concat","pendingTxns","signedTxnPromise","sendSignedTransaction","signedTransaction","slot","StopOnFailure","Promise","all","txs","result","awaitConfirmation","includesFeePayer","Array","isArray","rawTransaction","serialize","skipPreflight","sendRawTransaction","confirmation","getUnixTs","timeout","startTime","sleep","simulateResult","simulateTransaction","logs","line","slice","JSON","stringify","_recentBlockhash","_disableBlockhashCaching","signData","serializeMessage","wireTransaction","_serialize","encodedTransaction","toString","args","encoding","_rpcRequest","res","queryStatus","confirmations","subId","resolve","reject","onSignature","context","getSignatureStatuses","signatureStatuses","removeSignatureListener","ms","TOKEN_METADATA_PROGRAM_ID","createAssociatedTokenAccountInstruction","associatedTokenAddress","payer","walletAddress","splTokenMintAddress","keys","pubkey","isSigner","isWritable","SystemProgram","programId","SYSVAR_RENT_PUBKEY","TransactionInstruction","data","preflightCommitment","fetchIdl","idl","account","fetch","id","authority","treasury","hiddenSettings","getMasterEdition","getMetadata","getCandyMachineCreator","candyMachineAddress","getCollectionAuthorityRecordPDA","newAuthority","Keypair","generate","userTokenAccountAddress","MintLayout","span","getMinimumBalanceForRentExemption","fromPubkey","newAccountPubkey","space","lamports","createAccount","Token","createInitMintInstruction","createMintToInstruction","userTokenAccount","setupState","userPayingAccountAddress","remainingAccounts","whitelistToken","metadataAddress","masterEdition","candyMachineCreator","creatorBump","rm","mintNft","accounts","metadata","mintAuthority","updateAuthority","tokenMetadataProgram","tokenProgram","systemProgram","rent","clock","SYSVAR_CLOCK_PUBKEY","recentBlockhashes","SYSVAR_SLOT_HASHES_PUBKEY","instructionSysvarAccount","SYSVAR_INSTRUCTIONS_PUBKEY","collectionPda","collectionData","collectionMint","collectionAuthorityRecord","collectionMetadata","collectionMasterEdition","setCollectionDuringMint","instructionsMatrix","signersMatrix","txns","mintTxn"],"mappings":"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","file":"static/js/main.9b8a396c.chunk.js","sourcesContent":["import { Paper } from \"@material-ui/core\";\nimport Countdown from \"react-countdown\";\nimport { Theme, createStyles, makeStyles } from \"@material-ui/core/styles\";\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      display: \"flex\",\n      padding: theme.spacing(0),\n      \"& > *\": {\n        margin: theme.spacing(0.4),\n        width: theme.spacing(6),\n        height: theme.spacing(6),\n        display: \"flex\",\n        flexDirection: \"column\",\n        alignContent: \"center\",\n        alignItems: \"center\",\n        justifyContent: \"center\",\n        background: \"#a16ea9\",\n        color: \"white\",\n        borderRadius: 5,\n        fontSize: 10,\n      },\n    },\n    done: {\n      display: \"flex\",\n      margin: 0,\n      marginBottom: theme.spacing(0.5),\n      height: theme.spacing(3.5),\n      padding: theme.spacing(1),\n      flexDirection: \"column\",\n      alignContent: \"center\",\n      alignItems: \"center\",\n      justifyContent: \"center\",\n      background: \"#8b5ace\",\n      color: \"white\",\n      borderRadius: 5,\n      fontWeight: \"bold\",\n      fontSize: 18,\n    },\n    item: {\n      fontWeight: \"bold\",\n      fontSize: 18,\n    },\n  })\n);\n\ninterface MintCountdownProps {\n  date: Date | undefined;\n  style?: React.CSSProperties;\n  status?: string;\n  onComplete?: () => void;\n}\n\ninterface MintCountdownRender {\n  days: number;\n  hours: number;\n  minutes: number;\n  seconds: number;\n  completed: boolean;\n}\n\nexport const MintCountdown: React.FC<MintCountdownProps> = ({\n  date,\n  status,\n  style,\n  onComplete,\n}) => {\n  const classes = useStyles();\n  const renderCountdown = ({\n    days,\n    hours,\n    minutes,\n    seconds,\n    completed,\n  }: MintCountdownRender) => {\n    hours += days * 24;\n    if (completed) {\n      return status ? <span className={classes.done}>{status}</span> : null;\n    } else {\n      return (\n        <div className={classes.root} style={style}>\n          <Paper elevation={0}>\n            <span className={classes.item}>\n              {hours < 10 ? `0${hours}` : hours}\n            </span>\n            <span>hrs</span>\n          </Paper>\n          <Paper elevation={0}>\n            <span className={classes.item}>\n              {minutes < 10 ? `0${minutes}` : minutes}\n            </span>\n            <span>mins</span>\n          </Paper>\n          <Paper elevation={0}>\n            <span className={classes.item}>\n              {seconds < 10 ? `0${seconds}` : seconds}\n            </span>\n            <span>secs</span>\n          </Paper>\n        </div>\n      );\n    }\n  };\n\n  if (date) {\n    return (\n      <Countdown\n        date={date}\n        onComplete={onComplete}\n        renderer={renderCountdown}\n      />\n    );\n  } else {\n    return null;\n  }\n};\n","import styled from 'styled-components';\nimport Button from '@material-ui/core/Button';\nimport { CandyMachineAccount } from './candy-machine';\nimport { CircularProgress } from '@material-ui/core';\nimport { GatewayStatus, useGateway } from '@civic/solana-gateway-react';\nimport { useEffect, useState, useRef } from 'react';\nimport { useConnection, useWallet } from '@solana/wallet-adapter-react';\nimport {\n  findGatewayToken,\n  getGatewayTokenAddressForOwnerAndGatekeeperNetwork,\n  onGatewayTokenChange,\n  removeAccountChangeListener,\n} from '@identity.com/solana-gateway-ts';\n\nexport const CTAButton = styled(Button)`\n  width: 100%;\n  height: 60px;\n  margin-top: 10px;\n  margin-bottom: 5px;\n  background: linear-gradient(35deg, rgba(255,140,225,1) 0%, rgba(172,108,197,1) 75%);\n  color: #ffffff;\n  font-size: 16px;\n  font-weight: bold;\n`; // add your own styles here\n\nexport const MintButton = ({\n  onMint,\n  candyMachine,\n  isMinting,\n  setIsMinting,\n  isActive,\n}: {\n  onMint: () => Promise<void>;\n  candyMachine?: CandyMachineAccount;\n  isMinting: boolean;\n  setIsMinting: (val: boolean) => void;\n  isActive: boolean;\n}) => {\n  const wallet = useWallet();\n  const connection = useConnection();\n  const [verified, setVerified] = useState(false);\n  const { requestGatewayToken, gatewayStatus } = useGateway();\n  const [webSocketSubscriptionId, setWebSocketSubscriptionId] = useState(-1);\n  const [clicked, setClicked] = useState(false);\n\n  const getMintButtonContent = () => {\n    if (candyMachine?.state.isSoldOut) {\n      return 'SOLD OUT';\n    } else if (isMinting) {\n      return <CircularProgress />;\n    } else if (\n      candyMachine?.state.isPresale ||\n      candyMachine?.state.isWhitelistOnly\n    ) {\n      return 'WHITELIST MINT';\n    }\n\n    return 'MINT';\n  };\n\n  useEffect(() => {\n    const mint = async () => {\n      await removeAccountChangeListener(\n        connection.connection,\n        webSocketSubscriptionId,\n      );\n      await onMint();\n\n      setClicked(false);\n      setVerified(false);\n    };\n    if (verified && clicked) {\n      mint();\n    }\n  }, [\n    verified,\n    clicked,\n    connection.connection,\n    onMint,\n    webSocketSubscriptionId,\n  ]);\n\n  const previousGatewayStatus = usePrevious(gatewayStatus);\n  useEffect(() => {\n    const fromStates = [\n      GatewayStatus.NOT_REQUESTED,\n      GatewayStatus.REFRESH_TOKEN_REQUIRED,\n    ];\n    const invalidToStates = [...fromStates, GatewayStatus.UNKNOWN];\n    if (\n      fromStates.find(state => previousGatewayStatus === state) &&\n      !invalidToStates.find(state => gatewayStatus === state)\n    ) {\n      setIsMinting(true);\n    }\n    console.log('change: ', gatewayStatus);\n  }, [setIsMinting, previousGatewayStatus, gatewayStatus]);\n\n  return (\n    <CTAButton\n      disabled={isMinting || !isActive}\n      onClick={async () => {\n        if (candyMachine?.state.isActive && candyMachine?.state.gatekeeper) {\n          const network =\n            candyMachine.state.gatekeeper.gatekeeperNetwork.toBase58();\n          if (network === 'ignREusXmGrscGNUesoU9mxfds9AiYTezUKex2PsZV6') {\n            if (gatewayStatus === GatewayStatus.ACTIVE) {\n              await onMint();\n            } else {\n              // setIsMinting(true);\n              await requestGatewayToken();\n              console.log('after: ', gatewayStatus);\n            }\n          } else if (\n            network === 'ttib7tuX8PTWPqFsmUFQTj78MbRhUmqxidJRDv4hRRE' ||\n            network === 'tibePmPaoTgrs929rWpu755EXaxC7M3SthVCf6GzjZt'\n          ) {\n            setClicked(true);\n            const gatewayToken = await findGatewayToken(\n              connection.connection,\n              wallet.publicKey!,\n              candyMachine.state.gatekeeper.gatekeeperNetwork,\n            );\n\n            if (gatewayToken?.isValid()) {\n              await onMint();\n            } else {\n              window.open(\n                `https://verify.encore.fans/?gkNetwork=${network}`,\n                '_blank',\n              );\n\n              const gatewayTokenAddress =\n                await getGatewayTokenAddressForOwnerAndGatekeeperNetwork(\n                  wallet.publicKey!,\n                  candyMachine.state.gatekeeper.gatekeeperNetwork,\n                );\n\n              setWebSocketSubscriptionId(\n                onGatewayTokenChange(\n                  connection.connection,\n                  gatewayTokenAddress,\n                  () => setVerified(true),\n                  'confirmed',\n                ),\n              );\n            }\n          } else {\n            setClicked(false);\n            throw new Error(`Unknown Gatekeeper Network: ${network}`);\n          }\n        } else {\n          await onMint();\n          setClicked(false);\n        }\n      }}\n      variant=\"contained\"\n    >\n      {getMintButtonContent()}\n    </CTAButton>\n  );\n};\n\nfunction usePrevious<T>(value: T): T | undefined {\n  const ref = useRef<T>();\n  useEffect(() => {\n    ref.current = value;\n  }, [value]);\n  return ref.current;\n}","import { useCallback, useEffect, useMemo, useState } from \"react\";\nimport * as anchor from \"@project-serum/anchor\";\n\nimport styled from \"styled-components\";\nimport { Container, Snackbar } from \"@material-ui/core\";\nimport Paper from \"@material-ui/core/Paper\";\nimport Alert from \"@material-ui/lab/Alert\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Box from \"@material-ui/core/Box\";\nimport Typography from \"@material-ui/core/Typography\";\nimport {\n  Commitment,\n  Connection,\n  PublicKey,\n  Transaction,\n} from \"@solana/web3.js\";\nimport { useWallet } from \"@solana/wallet-adapter-react\";\nimport { WalletDialogButton } from \"@solana/wallet-adapter-material-ui\";\nimport {\n  awaitTransactionSignatureConfirmation,\n  CANDY_MACHINE_PROGRAM,\n  CandyMachineAccount,\n  createAccountsForMint,\n  getCandyMachineState,\n  getCollectionPDA,\n  mintOneToken,\n  SetupState,\n} from \"./candy-machine\";\nimport { AlertState, formatNumber, getAtaForMint, toDate } from \"./utils\";\nimport { MintCountdown } from \"./MintCountdown\";\nimport { MintButton } from \"./MintButton\";\nimport { GatewayProvider } from \"@civic/solana-gateway-react\";\nimport { sendTransaction } from \"./connection\";\nimport { WalletAdapterNetwork } from \"@solana/wallet-adapter-base\";\nimport { usePoller } from \"./hooks/usePoller\";\n//@ts-ignore\nimport confetti from \"canvas-confetti\";\nrequire(\"./Bg.css\");\nconst IMAGE_LINK = \"/animation.gif\";\nconst LOGO_LINK = \"/logo.png\";\n\nfunction throwConfetti(): void {\n  confetti({\n    particleCount: 200,\n    spread: 70,\n    origin: { y: 0.6 },\n  });\n}\n\nconst ConnectButton = styled(WalletDialogButton)`\n  width: 100%;\n  height: 60px;\n  margin-top: 10px;\n  margin-bottom: 5px;\n  background: linear-gradient(90deg, rgba(0,219,153,1) 0%, rgba(76,171,221,1) 50%, rgba(139,89,205,1) 100%);\n  color: #34383c;\n  font-size: 16px;\n  font-weight: bold;\n`;\n\nconst StyledPaper = styled(Paper)`\n  padding: 20px;\n  background-color: #34383c;\n  border-radius: 22px;\n  margin: 20px;\n  box-shadow: 10px 10px 10px 0px rgb(0 0 0);\n`;\nconst MintContainer = styled.div``; // add your owns styles here\n\nexport interface HomeProps {\n  candyMachineId?: anchor.web3.PublicKey;\n  connection: anchor.web3.Connection;\n  txTimeout: number;\n  rpcHost: string;\n  network: WalletAdapterNetwork;\n}\n\nconst Home = (props: HomeProps) => {\n  const [animatedBg, setAnimatedBg] = useState(false);\n  const [isUserMinting, setIsUserMinting] = useState(false);\n  const [candyMachine, setCandyMachine] = useState<CandyMachineAccount>();\n  const [alertState, setAlertState] = useState<AlertState>({\n    open: false,\n    message: \"\",\n    severity: undefined,\n  });\n  const [isActive, setIsActive] = useState(false);\n  const [currentShift, setCurrentShift] = useState<number>(0);\n  const [endDate, setEndDate] = useState<Date>();\n  const [itemsRemaining, setItemsRemaining] = useState<number>();\n  const [isWhitelistUser, setIsWhitelistUser] = useState(false);\n  const [isPresale, setIsPresale] = useState(false);\n  const [isValidBalance, setIsValidBalance] = useState(false);\n  const [discountPrice, setDiscountPrice] = useState<anchor.BN>();\n  const [needTxnSplit, setNeedTxnSplit] = useState(true);\n  const [setupTxn, setSetupTxn] = useState<SetupState>();\n\n  const rpcUrl = props.rpcHost;\n  const wallet = useWallet();\n\n  const anchorWallet = useMemo(() => {\n    if (\n      !wallet ||\n      !wallet.publicKey ||\n      !wallet.signAllTransactions ||\n      !wallet.signTransaction\n    ) {\n      return;\n    }\n\n    return {\n      publicKey: wallet.publicKey,\n      signAllTransactions: wallet.signAllTransactions,\n      signTransaction: wallet.signTransaction,\n    } as anchor.Wallet;\n  }, [wallet]);\n\n  const refreshCandyMachineState = useCallback(\n    async (commitment: Commitment = \"confirmed\") => {\n      if (!anchorWallet) {\n        return;\n      }\n\n      const connection = new Connection(props.rpcHost, commitment);\n\n      if (props.candyMachineId) {\n        try {\n          const cndy = await getCandyMachineState(\n            anchorWallet,\n            props.candyMachineId,\n            connection\n          );\n\n          const currentSlot = await connection.getSlot();\n          const blockTime = (await connection.getBlockTime(\n            currentSlot\n          )) as number;\n          const shift = new Date().getTime() / 1000 - blockTime;\n\n          setCurrentShift(shift);\n\n          let active =\n            cndy?.state.goLiveDate?.toNumber() <\n            new Date().getTime() / 1000 + shift;\n          let presale = false;\n\n          // duplication of state to make sure we have the right values!\n          let isWLUser = false;\n          let userPrice = cndy.state.price;\n\n          // whitelist mint?\n          if (cndy?.state.whitelistMintSettings) {\n            // is it a presale mint?\n            if (\n              cndy.state.whitelistMintSettings.presale &&\n              (!cndy.state.goLiveDate ||\n                cndy.state.goLiveDate.toNumber() > new Date().getTime() / 1000)\n            ) {\n              presale = true;\n            }\n            // is there a discount?\n            if (cndy.state.whitelistMintSettings.discountPrice) {\n              setDiscountPrice(cndy.state.whitelistMintSettings.discountPrice);\n              userPrice = cndy.state.whitelistMintSettings.discountPrice;\n            } else {\n              setDiscountPrice(undefined);\n              // when presale=false and discountPrice=null, mint is restricted\n              // to whitelist users only\n              if (!cndy.state.whitelistMintSettings.presale) {\n                cndy.state.isWhitelistOnly = true;\n              }\n            }\n            // retrieves the whitelist token\n            const mint = new anchor.web3.PublicKey(\n              cndy.state.whitelistMintSettings.mint\n            );\n            const token = (\n              await getAtaForMint(mint, anchorWallet.publicKey)\n            )[0];\n\n            try {\n              const balance = await connection.getTokenAccountBalance(token);\n              isWLUser = parseInt(balance.value.amount) > 0;\n              // only whitelist the user if the balance > 0\n              setIsWhitelistUser(isWLUser);\n\n              if (cndy.state.isWhitelistOnly) {\n                active = isWLUser && (presale || active);\n              }\n            } catch (e) {\n              setIsWhitelistUser(false);\n              // no whitelist user, no mint\n              if (cndy.state.isWhitelistOnly) {\n                active = false;\n              }\n              console.log(\n                \"There was a problem fetching whitelist token balance\"\n              );\n              console.log(e);\n            }\n          }\n          userPrice = isWLUser ? userPrice : cndy.state.price;\n\n          if (cndy?.state.tokenMint) {\n            // retrieves the SPL token\n            const mint = new anchor.web3.PublicKey(cndy.state.tokenMint);\n            const token = (\n              await getAtaForMint(mint, anchorWallet.publicKey)\n            )[0];\n            try {\n              const balance = await connection.getTokenAccountBalance(token);\n\n              const valid = new anchor.BN(balance.value.amount).gte(userPrice);\n\n              // only allow user to mint if token balance >  the user if the balance > 0\n              setIsValidBalance(valid);\n              active = active && valid;\n            } catch (e) {\n              setIsValidBalance(false);\n              active = false;\n              // no whitelist user, no mint\n              console.log(\"There was a problem fetching SPL token balance\");\n              console.log(e);\n            }\n          } else {\n            const balance = new anchor.BN(\n              await connection.getBalance(anchorWallet.publicKey)\n            );\n            const valid = balance.gte(userPrice);\n            setIsValidBalance(valid);\n            active = active && valid;\n          }\n\n          // datetime to stop the mint?\n          if (cndy?.state.endSettings?.endSettingType.date) {\n            setEndDate(toDate(cndy.state.endSettings.number));\n            if (\n              cndy.state.endSettings.number.toNumber() <\n              new Date().getTime() / 1000\n            ) {\n              active = false;\n            }\n          }\n          // amount to stop the mint?\n          if (cndy?.state.endSettings?.endSettingType.amount) {\n            let limit = Math.min(\n              cndy.state.endSettings.number.toNumber(),\n              cndy.state.itemsAvailable\n            );\n            if (cndy.state.itemsRedeemed < limit) {\n              setItemsRemaining(limit - cndy.state.itemsRedeemed);\n            } else {\n              setItemsRemaining(0);\n              cndy.state.isSoldOut = true;\n            }\n          } else {\n            setItemsRemaining(cndy.state.itemsRemaining);\n          }\n\n          if (cndy.state.isSoldOut) {\n            active = false;\n          }\n\n          const [collectionPDA] = await getCollectionPDA(props.candyMachineId);\n          const collectionPDAAccount = await connection.getAccountInfo(\n            collectionPDA\n          );\n\n          setIsActive((cndy.state.isActive = active));\n          setIsPresale((cndy.state.isPresale = presale));\n          setCandyMachine(cndy);\n\n          const txnEstimate =\n            892 +\n            (!!collectionPDAAccount && cndy.state.retainAuthority ? 182 : 0) +\n            (cndy.state.tokenMint ? 66 : 0) +\n            (cndy.state.whitelistMintSettings ? 34 : 0) +\n            (cndy.state.whitelistMintSettings?.mode?.burnEveryTime ? 34 : 0) +\n            (cndy.state.gatekeeper ? 33 : 0) +\n            (cndy.state.gatekeeper?.expireOnUse ? 66 : 0);\n\n          setNeedTxnSplit(txnEstimate > 1230);\n        } catch (e) {\n          if (e instanceof Error) {\n            if (\n              e.message === `Account does not exist ${props.candyMachineId}`\n            ) {\n              setAlertState({\n                open: true,\n                message: `Couldn't fetch candy machine state from candy machine with address: ${props.candyMachineId}, using rpc: ${props.rpcHost}! You probably typed the REACT_APP_CANDY_MACHINE_ID value in wrong in your .env file, or you are using the wrong RPC!`,\n                severity: \"error\",\n                hideDuration: null,\n              });\n            } else if (\n              e.message.startsWith(\"failed to get info about account\")\n            ) {\n              setAlertState({\n                open: true,\n                message: `Couldn't fetch candy machine state with rpc: ${props.rpcHost}! This probably means you have an issue with the REACT_APP_SOLANA_RPC_HOST value in your .env file, or you are not using a custom RPC!`,\n                severity: \"error\",\n                hideDuration: null,\n              });\n            }\n          } else {\n            setAlertState({\n              open: true,\n              message: `${e}`,\n              severity: \"error\",\n              hideDuration: null,\n            });\n          }\n          console.log(e);\n        }\n      } else {\n        setAlertState({\n          open: true,\n          message: `Your REACT_APP_CANDY_MACHINE_ID value in the .env file doesn't look right! Make sure you enter it in as plain base-58 address!`,\n          severity: \"error\",\n          hideDuration: null,\n        });\n      }\n    },\n    [anchorWallet, props.candyMachineId, props.rpcHost]\n  );\n\n  const onMint = async (\n    beforeTransactions: Transaction[] = [],\n    afterTransactions: Transaction[] = []\n  ) => {\n    try {\n      setIsUserMinting(true);\n      document.getElementById(\"#identity\")?.click();\n      if (wallet.connected && candyMachine?.program && wallet.publicKey) {\n        let setupMint: SetupState | undefined;\n        if (needTxnSplit && setupTxn === undefined) {\n          setAlertState({\n            open: true,\n            message: \"Please sign account setup transaction\",\n            severity: \"info\",\n          });\n          setupMint = await createAccountsForMint(\n            candyMachine,\n            wallet.publicKey\n          );\n          let status: any = { err: true };\n          if (setupMint.transaction) {\n            status = await awaitTransactionSignatureConfirmation(\n              setupMint.transaction,\n              props.txTimeout,\n              props.connection,\n              true\n            );\n          }\n          if (status && !status.err) {\n            setSetupTxn(setupMint);\n            setAlertState({\n              open: true,\n              message:\n                \"Setup transaction succeeded! Please sign minting transaction\",\n              severity: \"info\",\n            });\n          } else {\n            setAlertState({\n              open: true,\n              message: \"Mint failed! Please try again!\",\n              severity: \"error\",\n            });\n            setIsUserMinting(false);\n            return;\n          }\n        } else {\n          setAlertState({\n            open: true,\n            message: \"Please sign minting transaction\",\n            severity: \"info\",\n          });\n        }\n\n        let mintResult = await mintOneToken(\n          candyMachine,\n          wallet.publicKey,\n          beforeTransactions,\n          afterTransactions,\n          setupMint ?? setupTxn\n        );\n\n        let status: any = { err: true };\n        let metadataStatus = null;\n        if (mintResult) {\n          status = await awaitTransactionSignatureConfirmation(\n            mintResult.mintTxId,\n            props.txTimeout,\n            props.connection,\n            true\n          );\n\n          metadataStatus =\n            await candyMachine.program.provider.connection.getAccountInfo(\n              mintResult.metadataKey,\n              \"processed\"\n            );\n          console.log(\"Metadata status: \", !!metadataStatus);\n        }\n\n        if (status && !status.err && metadataStatus) {\n          // manual update since the refresh might not detect\n          // the change immediately\n          let remaining = itemsRemaining! - 1;\n          setItemsRemaining(remaining);\n          setIsActive((candyMachine.state.isActive = remaining > 0));\n          candyMachine.state.isSoldOut = remaining === 0;\n          setSetupTxn(undefined);\n          setAlertState({\n            open: true,\n            message: \"Congratulations! Mint succeeded!\",\n            severity: \"success\",\n            hideDuration: 7000,\n          });\n          refreshCandyMachineState(\"processed\");\n        } else if (status && !status.err) {\n          setAlertState({\n            open: true,\n            message:\n              \"Mint likely failed! Anti-bot SOL 0.01 fee potentially charged! Check the explorer to confirm the mint failed and if so, make sure you are eligible to mint before trying again.\",\n            severity: \"error\",\n            hideDuration: 8000,\n          });\n          refreshCandyMachineState();\n        } else {\n          setAlertState({\n            open: true,\n            message: \"Mint failed! Please try again!\",\n            severity: \"error\",\n          });\n          refreshCandyMachineState();\n        }\n      }\n    } catch (error: any) {\n      let message = error.msg || \"Minting failed! Please try again!\";\n      if (!error.msg) {\n        if (!error.message) {\n          message = \"Transaction timeout! Please try again.\";\n        } else if (error.message.indexOf(\"0x137\")) {\n          console.log(error);\n          message = `SOLD OUT!`;\n        } else if (error.message.indexOf(\"0x135\")) {\n          message = `Insufficient funds to mint. Please fund your wallet.`;\n        }\n      } else {\n        if (error.code === 311) {\n          console.log(error);\n          message = `SOLD OUT!`;\n          window.location.reload();\n        } else if (error.code === 312) {\n          message = `Minting period hasn't started yet.`;\n        }\n      }\n\n      setAlertState({\n        open: true,\n        message,\n        severity: \"error\",\n      });\n      // updates the candy machine state to reflect the latest\n      // information on chain\n      refreshCandyMachineState();\n    } finally {\n      setIsUserMinting(false);\n    }\n  };\n\n  const toggleMintButton = () => {\n    let active = !isActive || isPresale;\n\n    if (active) {\n      if (candyMachine!.state.isWhitelistOnly && !isWhitelistUser) {\n        active = false;\n      }\n      if (endDate && Date.now() >= endDate.getTime()) {\n        active = false;\n      }\n    }\n\n    if (\n      isPresale &&\n      candyMachine!.state.goLiveDate &&\n      candyMachine!.state.goLiveDate.toNumber() <= new Date().getTime() / 1000\n    ) {\n      setIsPresale((candyMachine!.state.isPresale = false));\n    }\n\n    setIsActive((candyMachine!.state.isActive = active));\n  };\n\n  useEffect(() => {\n    refreshCandyMachineState();\n  }, [\n    anchorWallet,\n    props.candyMachineId,\n    props.connection,\n    refreshCandyMachineState,\n  ]);\n\n  useEffect(() => {\n    (function loop() {\n      setTimeout(() => {\n        refreshCandyMachineState();\n        loop();\n      }, 20000);\n    })();\n  }, [refreshCandyMachineState]);\n\n  return (\n    <>\n      {animatedBg && (\n        <div className=\"section section--featured\">\n          <div className=\"row-container\">\n            <div className=\"line\">\n              <div>\n                <div className=\"row\">\n                  <img src=\"line-3-min.png\" alt=\"\" />\n                </div>\n                <div className=\"row\">\n                  <img src=\"line-3-min.png\" alt=\"\" />\n                </div>\n              </div>\n            </div>\n\n            <div className=\"line second\">\n              <div>\n                <div className=\"row\">\n                  <img src=\"line-1-min.png\" alt=\"\" />\n                </div>\n                <div className=\"row\">\n                  <img src=\"line-1-min.png\" alt=\"\" />\n                </div>\n              </div>\n            </div>\n            <div className=\"line third\">\n              <div>\n                <div className=\"row\">\n                  <img src=\"line-3-min.png\" alt=\"\" />\n                </div>\n                <div className=\"row\">\n                  <img src=\"line-3-min.png\" alt=\"\" />\n                </div>\n              </div>\n            </div>\n          </div>\n          <div className=\"shadow\">\n            <span></span>\n          </div>\n        </div>\n      )}\n      <Box style={{ minHeight: \"100vh\", display: \"flex\" }} alignItems=\"center\">\n        <Container maxWidth=\"xs\" style={{ position: \"relative\" }}>\n          <StyledPaper>\n            {\" \"}\n            <img\n              src={LOGO_LINK}\n              alt=\"\"\n              width=\"100%\"\n              style={{ borderRadius: \"5px\" }}\n            />\n          </StyledPaper>\n          <StyledPaper>\n            <div>\n              <img\n                src={IMAGE_LINK}\n                alt=\"\"\n                width=\"100%\"\n                style={{ borderRadius: \"5px\" }}\n              />\n            </div>\n          </StyledPaper>\n\n          <StyledPaper>\n            {!wallet.connected ? (\n              <ConnectButton>Connect Wallet</ConnectButton>\n            ) : (\n              <>\n                {candyMachine && (\n                  <Grid\n                    container\n                    direction=\"row\"\n                    justifyContent=\"center\"\n                    wrap=\"nowrap\"\n                  >\n                    <Grid item xs={3}>\n                      <Typography variant=\"body2\" style={{ color: \"#ffffff\" }}>\n                        Remaining\n                      </Typography>\n                      <Typography\n                        variant=\"h6\"\n                        style={{\n                          fontWeight: \"bold\",\n                          color: \"#ffffff\",\n                        }}\n                      >\n                        {`${itemsRemaining}`}\n                      </Typography>\n                    </Grid>\n                    <Grid item xs={4}>\n                      <Typography variant=\"body2\" style={{ color: \"#ffffff\" }}>\n                        {isWhitelistUser && discountPrice\n                          ? \"Discount Price\"\n                          : \"Price\"}\n                      </Typography>\n                      <Typography\n                        variant=\"h6\"\n                        style={{ fontWeight: \"bold\", color: \"#ffffff\" }}\n                      >\n                        {isWhitelistUser && discountPrice\n                          ? `◎ ${formatNumber.asNumber(discountPrice)}`\n                          : `◎ ${formatNumber.asNumber(\n                              candyMachine.state.price\n                            )}`}\n                      </Typography>\n                    </Grid>\n                    <Grid item xs={5}>\n                      {isActive && endDate && Date.now() < endDate.getTime() ? (\n                        <>\n                          <MintCountdown\n                            key=\"endSettings\"\n                            date={getCountdownDate(candyMachine, currentShift)}\n                            style={{ justifyContent: \"flex-end\" }}\n                            status=\"COMPLETED\"\n                            onComplete={toggleMintButton}\n                          />\n                          <Typography\n                            variant=\"caption\"\n                            align=\"center\"\n                            display=\"block\"\n                            style={{ fontWeight: \"bold\" }}\n                          >\n                            TO END OF MINT\n                          </Typography>\n                        </>\n                      ) : (\n                        <>\n                          <MintCountdown\n                            key=\"goLive\"\n                            date={getCountdownDate(candyMachine, currentShift)}\n                            style={{ justifyContent: \"flex-end\" }}\n                            status={\n                              candyMachine?.state?.isSoldOut ||\n                              (endDate && Date.now() > endDate.getTime())\n                                ? \"COMPLETED\"\n                                : isPresale\n                                ? \"PRESALE\"\n                                : \"LIVE\"\n                            }\n                            onComplete={toggleMintButton}\n                          />\n                          {isPresale &&\n                            candyMachine.state.goLiveDate &&\n                            candyMachine.state.goLiveDate.toNumber() >\n                              new Date().getTime() / 1000 + currentShift && (\n                              <Typography\n                                variant=\"caption\"\n                                align=\"center\"\n                                display=\"block\"\n                                style={{ fontWeight: \"bold\" }}\n                              >\n                                UNTIL PUBLIC MINT\n                              </Typography>\n                            )}\n                        </>\n                      )}\n                    </Grid>\n                  </Grid>\n                )}\n                <MintContainer>\n                  {candyMachine?.state.isActive &&\n                  candyMachine?.state.gatekeeper &&\n                  wallet.publicKey &&\n                  wallet.signTransaction ? (\n                    //@ts-ignore\n                    <GatewayProvider\n                      wallet={{\n                        publicKey:\n                          wallet.publicKey ||\n                          new PublicKey(CANDY_MACHINE_PROGRAM),\n                        //@ts-ignore\n                        signTransaction: wallet.signTransaction,\n                      }}\n                      gatekeeperNetwork={\n                        candyMachine?.state?.gatekeeper?.gatekeeperNetwork\n                      }\n                      clusterUrl={\n                        props.network === WalletAdapterNetwork.Devnet\n                          ? \"https://api.devnet.solana.com\"\n                          : rpcUrl\n                      }\n                      handleTransaction={async (transaction: Transaction) => {\n                        setIsUserMinting(true);\n                        const userMustSign = transaction.signatures.find(\n                          (sig) => sig.publicKey.equals(wallet.publicKey!)\n                        );\n                        if (userMustSign) {\n                          setAlertState({\n                            open: true,\n                            message: \"Please sign one-time Civic Pass issuance\",\n                            severity: \"info\",\n                          });\n                          try {\n                            transaction = await wallet.signTransaction!(\n                              transaction\n                            );\n                          } catch (e) {\n                            setAlertState({\n                              open: true,\n                              message: \"User cancelled signing\",\n                              severity: \"error\",\n                            });\n                            // setTimeout(() => window.location.reload(), 2000);\n                            setIsUserMinting(false);\n                            throw e;\n                          }\n                        } else {\n                          setAlertState({\n                            open: true,\n                            message: \"Refreshing Civic Pass\",\n                            severity: \"info\",\n                          });\n                        }\n                        try {\n                          await sendTransaction(\n                            props.connection,\n                            wallet,\n                            transaction,\n                            [],\n                            true,\n                            \"confirmed\"\n                          );\n                          setAlertState({\n                            open: true,\n                            message: \"Please sign minting\",\n                            severity: \"info\",\n                          });\n                        } catch (e) {\n                          setAlertState({\n                            open: true,\n                            message:\n                              \"Solana dropped the transaction, please try again\",\n                            severity: \"warning\",\n                          });\n                          console.error(e);\n                          // setTimeout(() => window.location.reload(), 2000);\n                          setIsUserMinting(false);\n                          throw e;\n                        }\n                        await onMint();\n                      }}\n                      broadcastTransaction={false}\n                      options={{ autoShowModal: false }}\n                    >\n                      <MintButton\n                        candyMachine={candyMachine}\n                        isMinting={isUserMinting}\n                        setIsMinting={(val) => setIsUserMinting(val)}\n                        onMint={onMint}\n                        isActive={\n                          isActive ||\n                          (isPresale && isWhitelistUser && isValidBalance)\n                        }\n                      />\n                    </GatewayProvider>\n                  ) : (\n                    <MintButton\n                      candyMachine={candyMachine}\n                      isMinting={isUserMinting}\n                      setIsMinting={(val) => setIsUserMinting(val)}\n                      onMint={onMint}\n                      isActive={\n                        isActive ||\n                        (isPresale && isWhitelistUser && isValidBalance)\n                      }\n                    />\n                  )}\n                </MintContainer>\n              </>\n            )}\n          </StyledPaper>\n        </Container>\n\n        <Snackbar\n          open={alertState.open}\n          autoHideDuration={6000}\n          onClose={() => setAlertState({ ...alertState, open: false })}\n        >\n          <Alert\n            onClose={() => setAlertState({ ...alertState, open: false })}\n            severity={alertState.severity}\n          >\n            {alertState.message}\n          </Alert>\n        </Snackbar>\n      </Box>\n    </>\n  );\n};\n\nconst getCountdownDate = (\n  candyMachine: CandyMachineAccount,\n  currentShift: number\n): Date | undefined => {\n  if (\n    candyMachine.state.isActive &&\n    candyMachine.state.endSettings?.endSettingType.date\n  ) {\n    return toDate(candyMachine.state.endSettings.number);\n  }\n\n  return toDate(\n    candyMachine.state.goLiveDate\n      ? new anchor.BN(candyMachine.state.goLiveDate.toNumber() + currentShift)\n      : candyMachine.state.isPresale\n      ? new anchor.BN(new Date().getTime() / 1000)\n      : undefined\n  );\n};\n\nexport default Home;\n","import './App.css';\nimport { useMemo } from 'react';\nimport * as anchor from '@project-serum/anchor';\nimport Home from './Home';\nimport { DEFAULT_TIMEOUT } from './connection';\nimport { clusterApiUrl } from '@solana/web3.js';\nimport { WalletAdapterNetwork } from '@solana/wallet-adapter-base';\nimport {\n  getPhantomWallet,\n  getSlopeWallet,\n  getSolflareWallet,\n  getSolletWallet,\n  getSolletExtensionWallet,\n} from '@solana/wallet-adapter-wallets';\n\nimport {\n  ConnectionProvider,\n  WalletProvider,\n} from '@solana/wallet-adapter-react';\nimport { WalletDialogProvider } from '@solana/wallet-adapter-material-ui';\n\nimport { ThemeProvider, createTheme } from '@material-ui/core';\n\nconst theme = createTheme({\n  palette: {\n    type: 'dark',\n  },\n});\n\nconst getCandyMachineId = (): anchor.web3.PublicKey | undefined => {\n  try {\n    const candyMachineId = new anchor.web3.PublicKey(\n      process.env.REACT_APP_CANDY_MACHINE_ID!,\n    );\n\n    return candyMachineId;\n  } catch (e) {\n    console.log('Failed to construct CandyMachineId', e);\n    return undefined;\n  }\n};\n\nconst candyMachineId = getCandyMachineId();\nconst network = process.env.REACT_APP_SOLANA_NETWORK as WalletAdapterNetwork;\nconst rpcHost = process.env.REACT_APP_SOLANA_RPC_HOST!;\nconst connection = new anchor.web3.Connection(\n  rpcHost ? rpcHost : anchor.web3.clusterApiUrl('devnet'),\n);\n\nconst App = () => {\n  const endpoint = useMemo(() => clusterApiUrl(network), []);\n\n  const wallets = useMemo(\n    () => [\n      getPhantomWallet(),\n      getSolflareWallet(),\n      getSlopeWallet(),\n      getSolletWallet({ network }),\n      getSolletExtensionWallet({ network }),\n    ],\n    [],\n  );\n\n  return (\n    <ThemeProvider theme={theme}>\n      <ConnectionProvider endpoint={endpoint}>\n        <WalletProvider wallets={wallets} autoConnect>\n          <WalletDialogProvider>\n            <Home\n              candyMachineId={candyMachineId}\n              connection={connection}\n              txTimeout={DEFAULT_TIMEOUT}\n              rpcHost={rpcHost}\n              network={network}\n            />\n          </WalletDialogProvider>\n        </WalletProvider>\n      </ConnectionProvider>\n    </ThemeProvider>\n  );\n};\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nimport './index.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","import * as anchor from '@project-serum/anchor';\nimport { TOKEN_PROGRAM_ID } from '@solana/spl-token';\nimport { SystemProgram } from '@solana/web3.js';\nimport {\n  LAMPORTS_PER_SOL,\n  SYSVAR_RENT_PUBKEY,\n  TransactionInstruction,\n} from '@solana/web3.js';\n\nexport interface AlertState {\n  open: boolean;\n  message: string;\n  severity: 'success' | 'info' | 'warning' | 'error' | undefined;\n  hideDuration?: number | null;\n}\n\nexport const toDate = (value?: anchor.BN) => {\n  if (!value) {\n    return;\n  }\n\n  return new Date(value.toNumber() * 1000);\n};\n\nconst numberFormater = new Intl.NumberFormat('en-US', {\n  style: 'decimal',\n  minimumFractionDigits: 2,\n  maximumFractionDigits: 2,\n});\n\nexport const formatNumber = {\n  format: (val?: number) => {\n    if (!val) {\n      return '--';\n    }\n\n    return numberFormater.format(val);\n  },\n  asNumber: (val?: anchor.BN) => {\n    if (!val) {\n      return undefined;\n    }\n\n    return val.toNumber() / LAMPORTS_PER_SOL;\n  },\n};\n\nexport const SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID =\n  new anchor.web3.PublicKey('ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL');\n\nexport const CIVIC = new anchor.web3.PublicKey(\n  'gatem74V238djXdzWnJf94Wo1DcnuGkfijbf3AuBhfs',\n);\n\nexport const getAtaForMint = async (\n  mint: anchor.web3.PublicKey,\n  buyer: anchor.web3.PublicKey,\n): Promise<[anchor.web3.PublicKey, number]> => {\n  return await anchor.web3.PublicKey.findProgramAddress(\n    [buyer.toBuffer(), TOKEN_PROGRAM_ID.toBuffer(), mint.toBuffer()],\n    SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID,\n  );\n};\n\nexport const getNetworkExpire = async (\n  gatekeeperNetwork: anchor.web3.PublicKey,\n): Promise<[anchor.web3.PublicKey, number]> => {\n  return await anchor.web3.PublicKey.findProgramAddress(\n    [gatekeeperNetwork.toBuffer(), Buffer.from('expire')],\n    CIVIC,\n  );\n};\n\nexport const getNetworkToken = async (\n  wallet: anchor.web3.PublicKey,\n  gatekeeperNetwork: anchor.web3.PublicKey,\n): Promise<[anchor.web3.PublicKey, number]> => {\n  return await anchor.web3.PublicKey.findProgramAddress(\n    [\n      wallet.toBuffer(),\n      Buffer.from('gateway'),\n      Buffer.from([0, 0, 0, 0, 0, 0, 0, 0]),\n      gatekeeperNetwork.toBuffer(),\n    ],\n    CIVIC,\n  );\n};\n\nexport function createAssociatedTokenAccountInstruction(\n  associatedTokenAddress: anchor.web3.PublicKey,\n  payer: anchor.web3.PublicKey,\n  walletAddress: anchor.web3.PublicKey,\n  splTokenMintAddress: anchor.web3.PublicKey,\n) {\n  const keys = [\n    {\n      pubkey: payer,\n      isSigner: true,\n      isWritable: true,\n    },\n    {\n      pubkey: associatedTokenAddress,\n      isSigner: false,\n      isWritable: true,\n    },\n    {\n      pubkey: walletAddress,\n      isSigner: false,\n      isWritable: false,\n    },\n    {\n      pubkey: splTokenMintAddress,\n      isSigner: false,\n      isWritable: false,\n    },\n    {\n      pubkey: SystemProgram.programId,\n      isSigner: false,\n      isWritable: false,\n    },\n    {\n      pubkey: TOKEN_PROGRAM_ID,\n      isSigner: false,\n      isWritable: false,\n    },\n    {\n      pubkey: SYSVAR_RENT_PUBKEY,\n      isSigner: false,\n      isWritable: false,\n    },\n  ];\n  return new TransactionInstruction({\n    keys,\n    programId: SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID,\n    data: Buffer.from([]),\n  });\n}\n","import {\n  Keypair,\n  Commitment,\n  Connection,\n  RpcResponseAndContext,\n  SignatureStatus,\n  SimulatedTransactionResponse,\n  Transaction,\n  TransactionInstruction,\n  TransactionSignature,\n  Blockhash,\n  FeeCalculator,\n} from '@solana/web3.js';\n\nimport { WalletNotConnectedError } from '@solana/wallet-adapter-base';\n\ninterface BlockhashAndFeeCalculator {\n  blockhash: Blockhash;\n  feeCalculator: FeeCalculator;\n}\n\nexport const DEFAULT_TIMEOUT = 60000;\n\nexport const getErrorForTransaction = async (\n  connection: Connection,\n  txid: string,\n) => {\n  // wait for all confirmation before geting transaction\n  await connection.confirmTransaction(txid, 'max');\n\n  const tx = await connection.getParsedConfirmedTransaction(txid);\n\n  const errors: string[] = [];\n  if (tx?.meta && tx.meta.logMessages) {\n    tx.meta.logMessages.forEach(log => {\n      const regex = /Error: (.*)/gm;\n      let m;\n      while ((m = regex.exec(log)) !== null) {\n        // This is necessary to avoid infinite loops with zero-width matches\n        if (m.index === regex.lastIndex) {\n          regex.lastIndex++;\n        }\n\n        if (m.length > 1) {\n          errors.push(m[1]);\n        }\n      }\n    });\n  }\n\n  return errors;\n};\n\nexport enum SequenceType {\n  Sequential,\n  Parallel,\n  StopOnFailure,\n}\n\nexport async function sendTransactionsWithManualRetry(\n  connection: Connection,\n  wallet: any,\n  instructions: TransactionInstruction[][],\n  signers: Keypair[][],\n): Promise<(string | undefined)[]> {\n  let stopPoint = 0;\n  let tries = 0;\n  let lastInstructionsLength = null;\n  let toRemoveSigners: Record<number, boolean> = {};\n  instructions = instructions.filter((instr, i) => {\n    if (instr.length > 0) {\n      return true;\n    } else {\n      toRemoveSigners[i] = true;\n      return false;\n    }\n  });\n  let ids: string[] = [];\n  let filteredSigners = signers.filter((_, i) => !toRemoveSigners[i]);\n\n  while (stopPoint < instructions.length && tries < 3) {\n    instructions = instructions.slice(stopPoint, instructions.length);\n    filteredSigners = filteredSigners.slice(stopPoint, filteredSigners.length);\n\n    if (instructions.length === lastInstructionsLength) tries = tries + 1;\n    else tries = 0;\n\n    try {\n      if (instructions.length === 1) {\n        const id = await sendTransactionWithRetry(\n          connection,\n          wallet,\n          instructions[0],\n          filteredSigners[0],\n          'single',\n        );\n        ids.push(id.txid);\n        stopPoint = 1;\n      } else {\n        const { txs } = await sendTransactions(\n          connection,\n          wallet,\n          instructions,\n          filteredSigners,\n          SequenceType.StopOnFailure,\n          'single',\n        );\n        ids = ids.concat(txs.map(t => t.txid));\n      }\n    } catch (e) {\n      console.error(e);\n    }\n    console.log(\n      'Died on ',\n      stopPoint,\n      'retrying from instruction',\n      instructions[stopPoint],\n      'instructions length is',\n      instructions.length,\n    );\n    lastInstructionsLength = instructions.length;\n  }\n\n  return ids;\n}\n\nexport const sendTransactions = async (\n  connection: Connection,\n  wallet: any,\n  instructionSet: TransactionInstruction[][],\n  signersSet: Keypair[][],\n  sequenceType: SequenceType = SequenceType.Parallel,\n  commitment: Commitment = 'singleGossip',\n  successCallback: (txid: string, ind: number) => void = (txid, ind) => {},\n  failCallback: (reason: string, ind: number) => boolean = (txid, ind) => false,\n  block?: BlockhashAndFeeCalculator,\n  beforeTransactions: Transaction[] = [],\n  afterTransactions: Transaction[] = [],\n): Promise<{ number: number; txs: { txid: string; slot: number }[] }> => {\n  if (!wallet.publicKey) throw new WalletNotConnectedError();\n\n  const unsignedTxns: Transaction[] = beforeTransactions;\n\n  if (!block) {\n    block = await connection.getRecentBlockhash(commitment);\n  }\n\n  for (let i = 0; i < instructionSet.length; i++) {\n    const instructions = instructionSet[i];\n    const signers = signersSet[i];\n\n    if (instructions.length === 0) {\n      continue;\n    }\n\n    let transaction = new Transaction();\n    instructions.forEach(instruction => transaction.add(instruction));\n    transaction.recentBlockhash = block.blockhash;\n    transaction.setSigners(\n      // fee payed by the wallet owner\n      wallet.publicKey,\n      ...signers.map(s => s.publicKey),\n    );\n\n    if (signers.length > 0) {\n      transaction.partialSign(...signers);\n    }\n\n    unsignedTxns.push(transaction);\n  }\n  unsignedTxns.push(...afterTransactions);\n\n  const partiallySignedTransactions = unsignedTxns.filter(t =>\n    t.signatures.find(sig => sig.publicKey.equals(wallet.publicKey)),\n  );\n  const fullySignedTransactions = unsignedTxns.filter(\n    t => !t.signatures.find(sig => sig.publicKey.equals(wallet.publicKey)),\n  );\n  let signedTxns = await wallet.signAllTransactions(\n    partiallySignedTransactions,\n  );\n  signedTxns = fullySignedTransactions.concat(signedTxns);\n  const pendingTxns: Promise<{ txid: string; slot: number }>[] = [];\n\n  console.log(\n    'Signed txns length',\n    signedTxns.length,\n    'vs handed in length',\n    instructionSet.length,\n  );\n  for (let i = 0; i < signedTxns.length; i++) {\n    const signedTxnPromise = sendSignedTransaction({\n      connection,\n      signedTransaction: signedTxns[i],\n    });\n\n    if (sequenceType !== SequenceType.Parallel) {\n      try {\n        await signedTxnPromise.then(({ txid, slot }) =>\n          successCallback(txid, i),\n        );\n        pendingTxns.push(signedTxnPromise);\n      } catch (e) {\n        console.log('Failed at txn index:', i);\n        console.log('Caught failure:', e);\n\n        failCallback(signedTxns[i], i);\n        if (sequenceType === SequenceType.StopOnFailure) {\n          return {\n            number: i,\n            txs: await Promise.all(pendingTxns),\n          };\n        }\n      }\n    } else {\n      pendingTxns.push(signedTxnPromise);\n    }\n  }\n\n  if (sequenceType !== SequenceType.Parallel) {\n    const result = await Promise.all(pendingTxns);\n    return { number: signedTxns.length, txs: result };\n  }\n\n  return { number: signedTxns.length, txs: await Promise.all(pendingTxns) };\n};\n\nexport const sendTransaction = async (\n  connection: Connection,\n  wallet: any,\n  instructions: TransactionInstruction[] | Transaction,\n  signers: Keypair[],\n  awaitConfirmation = true,\n  commitment: Commitment = 'singleGossip',\n  includesFeePayer: boolean = false,\n  block?: BlockhashAndFeeCalculator,\n) => {\n  if (!wallet.publicKey) throw new WalletNotConnectedError();\n\n  let transaction: Transaction;\n  if (!Array.isArray(instructions)) {\n    transaction = instructions;\n  } else {\n    transaction = new Transaction();\n    instructions.forEach(instruction => transaction.add(instruction));\n    transaction.recentBlockhash = (\n      block || (await connection.getRecentBlockhash(commitment))\n    ).blockhash;\n\n    if (includesFeePayer) {\n      transaction.setSigners(...signers.map(s => s.publicKey));\n    } else {\n      transaction.setSigners(\n        // fee payed by the wallet owner\n        wallet.publicKey,\n        ...signers.map(s => s.publicKey),\n      );\n    }\n\n    if (signers.length > 0) {\n      transaction.partialSign(...signers);\n    }\n    if (!includesFeePayer) {\n      transaction = await wallet.signTransaction(transaction);\n    }\n  }\n\n  const rawTransaction = transaction.serialize();\n  let options = {\n    skipPreflight: true,\n    commitment,\n  };\n\n  const txid = await connection.sendRawTransaction(rawTransaction, options);\n  let slot = 0;\n\n  if (awaitConfirmation) {\n    const confirmation = await awaitTransactionSignatureConfirmation(\n      txid,\n      DEFAULT_TIMEOUT,\n      connection,\n      commitment,\n    );\n\n    if (!confirmation)\n      throw new Error('Timed out awaiting confirmation on transaction');\n    slot = confirmation?.slot || 0;\n\n    if (confirmation?.err) {\n      const errors = await getErrorForTransaction(connection, txid);\n\n      console.log(errors);\n      throw new Error(`Raw transaction ${txid} failed`);\n    }\n  }\n\n  return { txid, slot };\n};\n\nexport const sendTransactionWithRetry = async (\n  connection: Connection,\n  wallet: any,\n  instructions: TransactionInstruction[],\n  signers: Keypair[],\n  commitment: Commitment = 'singleGossip',\n  includesFeePayer: boolean = false,\n  block?: BlockhashAndFeeCalculator,\n  beforeSend?: () => void,\n) => {\n  if (!wallet.publicKey) throw new WalletNotConnectedError();\n\n  let transaction = new Transaction();\n  instructions.forEach(instruction => transaction.add(instruction));\n  transaction.recentBlockhash = (\n    block || (await connection.getRecentBlockhash(commitment))\n  ).blockhash;\n\n  if (includesFeePayer) {\n    transaction.setSigners(...signers.map(s => s.publicKey));\n  } else {\n    transaction.setSigners(\n      // fee payed by the wallet owner\n      wallet.publicKey,\n      ...signers.map(s => s.publicKey),\n    );\n  }\n\n  if (signers.length > 0) {\n    transaction.partialSign(...signers);\n  }\n  if (!includesFeePayer) {\n    transaction = await wallet.signTransaction(transaction);\n  }\n\n  if (beforeSend) {\n    beforeSend();\n  }\n\n  const { txid, slot } = await sendSignedTransaction({\n    connection,\n    signedTransaction: transaction,\n  });\n\n  return { txid, slot };\n};\n\nexport const getUnixTs = () => {\n  return new Date().getTime() / 1000;\n};\n\nexport async function sendSignedTransaction({\n  signedTransaction,\n  connection,\n  timeout = DEFAULT_TIMEOUT,\n}: {\n  signedTransaction: Transaction;\n  connection: Connection;\n  sendingMessage?: string;\n  sentMessage?: string;\n  successMessage?: string;\n  timeout?: number;\n}): Promise<{ txid: string; slot: number }> {\n  const rawTransaction = signedTransaction.serialize();\n\n  const startTime = getUnixTs();\n  let slot = 0;\n  const txid: TransactionSignature = await connection.sendRawTransaction(\n    rawTransaction,\n    {\n      skipPreflight: true,\n    },\n  );\n\n  console.log('Started awaiting confirmation for', txid);\n\n  let done = false;\n  (async () => {\n    while (!done && getUnixTs() - startTime < timeout) {\n      connection.sendRawTransaction(rawTransaction, {\n        skipPreflight: true,\n      });\n      await sleep(500);\n    }\n  })();\n  try {\n    const confirmation = await awaitTransactionSignatureConfirmation(\n      txid,\n      timeout,\n      connection,\n      'recent',\n      true,\n    );\n\n    if (!confirmation)\n      throw new Error('Timed out awaiting confirmation on transaction');\n\n    if (confirmation.err) {\n      console.error(confirmation.err);\n      throw new Error('Transaction failed: Custom instruction error');\n    }\n\n    slot = confirmation?.slot || 0;\n  } catch (err: any) {\n    console.error('Timeout Error caught', err);\n    if (err.timeout) {\n      throw new Error('Timed out awaiting confirmation on transaction');\n    }\n    let simulateResult: SimulatedTransactionResponse | null = null;\n    try {\n      simulateResult = (\n        await simulateTransaction(connection, signedTransaction, 'single')\n      ).value;\n    } catch (e) {}\n    if (simulateResult && simulateResult.err) {\n      if (simulateResult.logs) {\n        for (let i = simulateResult.logs.length - 1; i >= 0; --i) {\n          const line = simulateResult.logs[i];\n          if (line.startsWith('Program log: ')) {\n            throw new Error(\n              'Transaction failed: ' + line.slice('Program log: '.length),\n            );\n          }\n        }\n      }\n      throw new Error(JSON.stringify(simulateResult.err));\n    }\n    // throw new Error('Transaction failed');\n  } finally {\n    done = true;\n  }\n\n  console.log('Latency', txid, getUnixTs() - startTime);\n  return { txid, slot };\n}\n\nasync function simulateTransaction(\n  connection: Connection,\n  transaction: Transaction,\n  commitment: Commitment,\n): Promise<RpcResponseAndContext<SimulatedTransactionResponse>> {\n  // @ts-ignore\n  transaction.recentBlockhash = await connection._recentBlockhash(\n    // @ts-ignore\n    connection._disableBlockhashCaching,\n  );\n\n  const signData = transaction.serializeMessage();\n  // @ts-ignore\n  const wireTransaction = transaction._serialize(signData);\n  const encodedTransaction = wireTransaction.toString('base64');\n  const config: any = { encoding: 'base64', commitment };\n  const args = [encodedTransaction, config];\n\n  // @ts-ignore\n  const res = await connection._rpcRequest('simulateTransaction', args);\n  if (res.error) {\n    throw new Error('failed to simulate transaction: ' + res.error.message);\n  }\n  return res.result;\n}\n\nasync function awaitTransactionSignatureConfirmation(\n  txid: TransactionSignature,\n  timeout: number,\n  connection: Connection,\n  commitment: Commitment = 'recent',\n  queryStatus = false,\n): Promise<SignatureStatus | null | void> {\n  let done = false;\n  let status: SignatureStatus | null | void = {\n    slot: 0,\n    confirmations: 0,\n    err: null,\n  };\n  let subId = 0;\n  status = await new Promise(async (resolve, reject) => {\n    setTimeout(() => {\n      if (done) {\n        return;\n      }\n      done = true;\n      console.log('Rejecting for timeout...');\n      reject({ timeout: true });\n    }, timeout);\n    try {\n      subId = connection.onSignature(\n        txid,\n        (result, context) => {\n          done = true;\n          status = {\n            err: result.err,\n            slot: context.slot,\n            confirmations: 0,\n          };\n          if (result.err) {\n            console.log('Rejected via websocket', result.err);\n            reject(status);\n          } else {\n            console.log('Resolved via websocket', result);\n            resolve(status);\n          }\n        },\n        commitment,\n      );\n    } catch (e) {\n      done = true;\n      console.error('WS error in setup', txid, e);\n    }\n    while (!done && queryStatus) {\n      // eslint-disable-next-line no-loop-func\n      (async () => {\n        try {\n          const signatureStatuses = await connection.getSignatureStatuses([\n            txid,\n          ]);\n          status = signatureStatuses && signatureStatuses.value[0];\n          if (!done) {\n            if (!status) {\n              console.log('REST null result for', txid, status);\n            } else if (status.err) {\n              console.log('REST error for', txid, status);\n              done = true;\n              reject(status.err);\n            } else if (!status.confirmations) {\n              console.log('REST no confirmations for', txid, status);\n            } else {\n              console.log('REST confirmation for', txid, status);\n              done = true;\n              resolve(status);\n            }\n          }\n        } catch (e) {\n          if (!done) {\n            console.log('REST connection error: txid', txid, e);\n          }\n        }\n      })();\n      await sleep(2000);\n    }\n  });\n\n  try {\n    connection.removeSignatureListener(subId);\n  } catch (e) {\n    // ignore\n  }\n  done = true;\n  console.log('Returning status', status);\n  return status;\n}\nexport function sleep(ms: number): Promise<void> {\n  return new Promise(resolve => setTimeout(resolve, ms));\n}\n","import * as anchor from '@project-serum/anchor';\n\nimport { MintLayout, TOKEN_PROGRAM_ID, Token } from '@solana/spl-token';\nimport {\n  SystemProgram,\n  Transaction,\n  SYSVAR_SLOT_HASHES_PUBKEY,\n} from '@solana/web3.js';\nimport { sendTransactions, SequenceType } from './connection';\n\nimport {\n  CIVIC,\n  getAtaForMint,\n  getNetworkExpire,\n  getNetworkToken,\n  SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID,\n} from './utils';\n\nexport const CANDY_MACHINE_PROGRAM = new anchor.web3.PublicKey(\n  'cndy3Z4yapfJBmL3ShUp5exZKqR3z33thTzeNMm2gRZ',\n);\n\nconst TOKEN_METADATA_PROGRAM_ID = new anchor.web3.PublicKey(\n  'metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s',\n);\n\ninterface CandyMachineState {\n  authority: anchor.web3.PublicKey;\n  itemsAvailable: number;\n  itemsRedeemed: number;\n  itemsRemaining: number;\n  treasury: anchor.web3.PublicKey;\n  tokenMint: null | anchor.web3.PublicKey;\n  isSoldOut: boolean;\n  isActive: boolean;\n  isPresale: boolean;\n  isWhitelistOnly: boolean;\n  goLiveDate: anchor.BN;\n  price: anchor.BN;\n  gatekeeper: null | {\n    expireOnUse: boolean;\n    gatekeeperNetwork: anchor.web3.PublicKey;\n  };\n  endSettings: null | {\n    number: anchor.BN;\n    endSettingType: any;\n  };\n  whitelistMintSettings: null | {\n    mode: any;\n    mint: anchor.web3.PublicKey;\n    presale: boolean;\n    discountPrice: null | anchor.BN;\n  };\n  hiddenSettings: null | {\n    name: string;\n    uri: string;\n    hash: Uint8Array;\n  };\n  retainAuthority: boolean;\n}\n\nexport interface CandyMachineAccount {\n  id: anchor.web3.PublicKey;\n  program: anchor.Program;\n  state: CandyMachineState;\n}\n\nexport const awaitTransactionSignatureConfirmation = async (\n  txid: anchor.web3.TransactionSignature,\n  timeout: number,\n  connection: anchor.web3.Connection,\n  queryStatus = false,\n): Promise<anchor.web3.SignatureStatus | null | void> => {\n  let done = false;\n  let status: anchor.web3.SignatureStatus | null | void = {\n    slot: 0,\n    confirmations: 0,\n    err: null,\n  };\n  let subId = 0;\n  status = await new Promise(async (resolve, reject) => {\n    setTimeout(() => {\n      if (done) {\n        return;\n      }\n      done = true;\n      console.log('Rejecting for timeout...');\n      reject({ timeout: true });\n    }, timeout);\n\n    while (!done && queryStatus) {\n      // eslint-disable-next-line no-loop-func\n      (async () => {\n        try {\n          const signatureStatuses = await connection.getSignatureStatuses([\n            txid,\n          ]);\n          status = signatureStatuses && signatureStatuses.value[0];\n          if (!done) {\n            if (!status) {\n              console.log('REST null result for', txid, status);\n            } else if (status.err) {\n              console.log('REST error for', txid, status);\n              done = true;\n              reject(status.err);\n            } else if (!status.confirmations) {\n              console.log('REST no confirmations for', txid, status);\n            } else {\n              console.log('REST confirmation for', txid, status);\n              done = true;\n              resolve(status);\n            }\n          }\n        } catch (e) {\n          if (!done) {\n            console.log('REST connection error: txid', txid, e);\n          }\n        }\n      })();\n      await sleep(2000);\n    }\n  });\n\n  try {\n    connection.removeSignatureListener(subId);\n  } catch (e) {\n    // ignore\n  }\n\n  done = true;\n  console.log('Returning status', status);\n  return status;\n};\n\nconst createAssociatedTokenAccountInstruction = (\n  associatedTokenAddress: anchor.web3.PublicKey,\n  payer: anchor.web3.PublicKey,\n  walletAddress: anchor.web3.PublicKey,\n  splTokenMintAddress: anchor.web3.PublicKey,\n) => {\n  const keys = [\n    { pubkey: payer, isSigner: true, isWritable: true },\n    { pubkey: associatedTokenAddress, isSigner: false, isWritable: true },\n    { pubkey: walletAddress, isSigner: false, isWritable: false },\n    { pubkey: splTokenMintAddress, isSigner: false, isWritable: false },\n    {\n      pubkey: anchor.web3.SystemProgram.programId,\n      isSigner: false,\n      isWritable: false,\n    },\n    { pubkey: TOKEN_PROGRAM_ID, isSigner: false, isWritable: false },\n    {\n      pubkey: anchor.web3.SYSVAR_RENT_PUBKEY,\n      isSigner: false,\n      isWritable: false,\n    },\n  ];\n  return new anchor.web3.TransactionInstruction({\n    keys,\n    programId: SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID,\n    data: Buffer.from([]),\n  });\n};\n\nexport const getCandyMachineState = async (\n  anchorWallet: anchor.Wallet,\n  candyMachineId: anchor.web3.PublicKey,\n  connection: anchor.web3.Connection,\n): Promise<CandyMachineAccount> => {\n  const provider = new anchor.Provider(connection, anchorWallet, {\n    preflightCommitment: 'processed',\n  });\n\n  const idl = await anchor.Program.fetchIdl(CANDY_MACHINE_PROGRAM, provider);\n\n  const program = new anchor.Program(idl!, CANDY_MACHINE_PROGRAM, provider);\n\n  const state: any = await program.account.candyMachine.fetch(candyMachineId);\n  const itemsAvailable = state.data.itemsAvailable.toNumber();\n  const itemsRedeemed = state.itemsRedeemed.toNumber();\n  const itemsRemaining = itemsAvailable - itemsRedeemed;\n\n  return {\n    id: candyMachineId,\n    program,\n    state: {\n      authority: state.authority,\n      itemsAvailable,\n      itemsRedeemed,\n      itemsRemaining,\n      isSoldOut: itemsRemaining === 0,\n      isActive: false,\n      isPresale: false,\n      isWhitelistOnly: false,\n      goLiveDate: state.data.goLiveDate,\n      treasury: state.wallet,\n      tokenMint: state.tokenMint,\n      gatekeeper: state.data.gatekeeper,\n      endSettings: state.data.endSettings,\n      whitelistMintSettings: state.data.whitelistMintSettings,\n      hiddenSettings: state.data.hiddenSettings,\n      price: state.data.price,\n      retainAuthority: state.data.retainAuthority,\n    },\n  };\n};\n\nconst getMasterEdition = async (\n  mint: anchor.web3.PublicKey,\n): Promise<anchor.web3.PublicKey> => {\n  return (\n    await anchor.web3.PublicKey.findProgramAddress(\n      [\n        Buffer.from('metadata'),\n        TOKEN_METADATA_PROGRAM_ID.toBuffer(),\n        mint.toBuffer(),\n        Buffer.from('edition'),\n      ],\n      TOKEN_METADATA_PROGRAM_ID,\n    )\n  )[0];\n};\n\nconst getMetadata = async (\n  mint: anchor.web3.PublicKey,\n): Promise<anchor.web3.PublicKey> => {\n  return (\n    await anchor.web3.PublicKey.findProgramAddress(\n      [\n        Buffer.from('metadata'),\n        TOKEN_METADATA_PROGRAM_ID.toBuffer(),\n        mint.toBuffer(),\n      ],\n      TOKEN_METADATA_PROGRAM_ID,\n    )\n  )[0];\n};\n\nexport const getCandyMachineCreator = async (\n  candyMachine: anchor.web3.PublicKey,\n): Promise<[anchor.web3.PublicKey, number]> => {\n  return await anchor.web3.PublicKey.findProgramAddress(\n    [Buffer.from('candy_machine'), candyMachine.toBuffer()],\n    CANDY_MACHINE_PROGRAM,\n  );\n};\n\nexport const getCollectionPDA = async (\n  candyMachineAddress: anchor.web3.PublicKey,\n): Promise<[anchor.web3.PublicKey, number]> => {\n  return await anchor.web3.PublicKey.findProgramAddress(\n    [Buffer.from('collection'), candyMachineAddress.toBuffer()],\n    CANDY_MACHINE_PROGRAM,\n  );\n};\n\nexport interface CollectionData {\n  mint: anchor.web3.PublicKey;\n  candyMachine: anchor.web3.PublicKey;\n}\n\nexport const getCollectionAuthorityRecordPDA = async (\n  mint: anchor.web3.PublicKey,\n  newAuthority: anchor.web3.PublicKey,\n): Promise<anchor.web3.PublicKey> => {\n  return (\n    await anchor.web3.PublicKey.findProgramAddress(\n      [\n        Buffer.from('metadata'),\n        TOKEN_METADATA_PROGRAM_ID.toBuffer(),\n        mint.toBuffer(),\n        Buffer.from('collection_authority'),\n        newAuthority.toBuffer(),\n      ],\n      TOKEN_METADATA_PROGRAM_ID,\n    )\n  )[0];\n};\n\nexport type SetupState = {\n  mint: anchor.web3.Keypair;\n  userTokenAccount: anchor.web3.PublicKey;\n  transaction: string;\n};\n\nexport const createAccountsForMint = async (\n  candyMachine: CandyMachineAccount,\n  payer: anchor.web3.PublicKey,\n): Promise<SetupState> => {\n  const mint = anchor.web3.Keypair.generate();\n  const userTokenAccountAddress = (\n    await getAtaForMint(mint.publicKey, payer)\n  )[0];\n\n  const signers: anchor.web3.Keypair[] = [mint];\n  const instructions = [\n    anchor.web3.SystemProgram.createAccount({\n      fromPubkey: payer,\n      newAccountPubkey: mint.publicKey,\n      space: MintLayout.span,\n      lamports:\n        await candyMachine.program.provider.connection.getMinimumBalanceForRentExemption(\n          MintLayout.span,\n        ),\n      programId: TOKEN_PROGRAM_ID,\n    }),\n    Token.createInitMintInstruction(\n      TOKEN_PROGRAM_ID,\n      mint.publicKey,\n      0,\n      payer,\n      payer,\n    ),\n    createAssociatedTokenAccountInstruction(\n      userTokenAccountAddress,\n      payer,\n      payer,\n      mint.publicKey,\n    ),\n    Token.createMintToInstruction(\n      TOKEN_PROGRAM_ID,\n      mint.publicKey,\n      userTokenAccountAddress,\n      payer,\n      [],\n      1,\n    ),\n  ];\n\n  return {\n    mint: mint,\n    userTokenAccount: userTokenAccountAddress,\n    transaction: (\n      await sendTransactions(\n        candyMachine.program.provider.connection,\n        candyMachine.program.provider.wallet,\n        [instructions],\n        [signers],\n        SequenceType.StopOnFailure,\n        'singleGossip',\n        () => {},\n        () => false,\n        undefined,\n        [],\n        [],\n      )\n    ).txs[0].txid,\n  };\n};\n\ntype MintResult = {\n  mintTxId: string;\n  metadataKey: anchor.web3.PublicKey;\n};\n\nexport const mintOneToken = async (\n  candyMachine: CandyMachineAccount,\n  payer: anchor.web3.PublicKey,\n  beforeTransactions: Transaction[] = [],\n  afterTransactions: Transaction[] = [],\n  setupState?: SetupState,\n): Promise<MintResult | null> => {\n  const mint = setupState?.mint ?? anchor.web3.Keypair.generate();\n  const userTokenAccountAddress = (\n    await getAtaForMint(mint.publicKey, payer)\n  )[0];\n\n  const userPayingAccountAddress = candyMachine.state.tokenMint\n    ? (await getAtaForMint(candyMachine.state.tokenMint, payer))[0]\n    : payer;\n\n  const candyMachineAddress = candyMachine.id;\n  const remainingAccounts = [];\n  const instructions = [];\n  const signers: anchor.web3.Keypair[] = [];\n  console.log('SetupState: ', setupState);\n  if (!setupState) {\n    signers.push(mint);\n    instructions.push(\n      ...[\n        anchor.web3.SystemProgram.createAccount({\n          fromPubkey: payer,\n          newAccountPubkey: mint.publicKey,\n          space: MintLayout.span,\n          lamports:\n            await candyMachine.program.provider.connection.getMinimumBalanceForRentExemption(\n              MintLayout.span,\n            ),\n          programId: TOKEN_PROGRAM_ID,\n        }),\n        Token.createInitMintInstruction(\n          TOKEN_PROGRAM_ID,\n          mint.publicKey,\n          0,\n          payer,\n          payer,\n        ),\n        createAssociatedTokenAccountInstruction(\n          userTokenAccountAddress,\n          payer,\n          payer,\n          mint.publicKey,\n        ),\n        Token.createMintToInstruction(\n          TOKEN_PROGRAM_ID,\n          mint.publicKey,\n          userTokenAccountAddress,\n          payer,\n          [],\n          1,\n        ),\n      ],\n    );\n  }\n\n  if (candyMachine.state.gatekeeper) {\n    remainingAccounts.push({\n      pubkey: (\n        await getNetworkToken(\n          payer,\n          candyMachine.state.gatekeeper.gatekeeperNetwork,\n        )\n      )[0],\n      isWritable: true,\n      isSigner: false,\n    });\n\n    if (candyMachine.state.gatekeeper.expireOnUse) {\n      remainingAccounts.push({\n        pubkey: CIVIC,\n        isWritable: false,\n        isSigner: false,\n      });\n      remainingAccounts.push({\n        pubkey: (\n          await getNetworkExpire(\n            candyMachine.state.gatekeeper.gatekeeperNetwork,\n          )\n        )[0],\n        isWritable: false,\n        isSigner: false,\n      });\n    }\n  }\n  if (candyMachine.state.whitelistMintSettings) {\n    const mint = new anchor.web3.PublicKey(\n      candyMachine.state.whitelistMintSettings.mint,\n    );\n\n    const whitelistToken = (await getAtaForMint(mint, payer))[0];\n    remainingAccounts.push({\n      pubkey: whitelistToken,\n      isWritable: true,\n      isSigner: false,\n    });\n\n    if (candyMachine.state.whitelistMintSettings.mode.burnEveryTime) {\n      remainingAccounts.push({\n        pubkey: mint,\n        isWritable: true,\n        isSigner: false,\n      });\n      remainingAccounts.push({\n        pubkey: payer,\n        isWritable: false,\n        isSigner: true,\n      });\n    }\n  }\n\n  if (candyMachine.state.tokenMint) {\n    remainingAccounts.push({\n      pubkey: userPayingAccountAddress,\n      isWritable: true,\n      isSigner: false,\n    });\n    remainingAccounts.push({\n      pubkey: payer,\n      isWritable: false,\n      isSigner: true,\n    });\n  }\n  const metadataAddress = await getMetadata(mint.publicKey);\n  const masterEdition = await getMasterEdition(mint.publicKey);\n\n  const [candyMachineCreator, creatorBump] = await getCandyMachineCreator(\n    candyMachineAddress,\n  );\n\n  console.log(remainingAccounts.map(rm => rm.pubkey.toBase58()));\n  instructions.push(\n    await candyMachine.program.instruction.mintNft(creatorBump, {\n      accounts: {\n        candyMachine: candyMachineAddress,\n        candyMachineCreator,\n        payer: payer,\n        wallet: candyMachine.state.treasury,\n        mint: mint.publicKey,\n        metadata: metadataAddress,\n        masterEdition,\n        mintAuthority: payer,\n        updateAuthority: payer,\n        tokenMetadataProgram: TOKEN_METADATA_PROGRAM_ID,\n        tokenProgram: TOKEN_PROGRAM_ID,\n        systemProgram: SystemProgram.programId,\n        rent: anchor.web3.SYSVAR_RENT_PUBKEY,\n        clock: anchor.web3.SYSVAR_CLOCK_PUBKEY,\n        recentBlockhashes: SYSVAR_SLOT_HASHES_PUBKEY,\n        instructionSysvarAccount: anchor.web3.SYSVAR_INSTRUCTIONS_PUBKEY,\n      },\n      remainingAccounts:\n        remainingAccounts.length > 0 ? remainingAccounts : undefined,\n    }),\n  );\n\n  const [collectionPDA] = await getCollectionPDA(candyMachineAddress);\n  const collectionPDAAccount =\n    await candyMachine.program.provider.connection.getAccountInfo(\n      collectionPDA,\n    );\n\n  if (collectionPDAAccount && candyMachine.state.retainAuthority) {\n    try {\n      const collectionData =\n        (await candyMachine.program.account.collectionPda.fetch(\n          collectionPDA,\n        )) as CollectionData;\n      console.log(collectionData);\n      const collectionMint = collectionData.mint;\n      const collectionAuthorityRecord = await getCollectionAuthorityRecordPDA(\n        collectionMint,\n        collectionPDA,\n      );\n      console.log(collectionMint);\n      if (collectionMint) {\n        const collectionMetadata = await getMetadata(collectionMint);\n        const collectionMasterEdition = await getMasterEdition(collectionMint);\n        console.log('Collection PDA: ', collectionPDA.toBase58());\n        console.log('Authority: ', candyMachine.state.authority.toBase58());\n        instructions.push(\n          await candyMachine.program.instruction.setCollectionDuringMint({\n            accounts: {\n              candyMachine: candyMachineAddress,\n              metadata: metadataAddress,\n              payer: payer,\n              collectionPda: collectionPDA,\n              tokenMetadataProgram: TOKEN_METADATA_PROGRAM_ID,\n              instructions: anchor.web3.SYSVAR_INSTRUCTIONS_PUBKEY,\n              collectionMint,\n              collectionMetadata,\n              collectionMasterEdition,\n              authority: candyMachine.state.authority,\n              collectionAuthorityRecord,\n            },\n          }),\n        );\n      }\n    } catch (error) {\n      console.error(error);\n    }\n  }\n\n  const instructionsMatrix = [instructions];\n  const signersMatrix = [signers];\n\n  try {\n    const txns = (\n      await sendTransactions(\n        candyMachine.program.provider.connection,\n        candyMachine.program.provider.wallet,\n        instructionsMatrix,\n        signersMatrix,\n        SequenceType.StopOnFailure,\n        'singleGossip',\n        () => {},\n        () => false,\n        undefined,\n        beforeTransactions,\n        afterTransactions,\n      )\n    ).txs.map(t => t.txid);\n    const mintTxn = txns[0];\n    return {\n      mintTxId: mintTxn,\n      metadataKey: metadataAddress,\n    };\n  } catch (e) {\n    console.log(e);\n  }\n  return null;\n};\n\nexport const shortenAddress = (address: string, chars = 4): string => {\n  return `${address.slice(0, chars)}...${address.slice(-chars)}`;\n};\n\nconst sleep = (ms: number): Promise<void> => {\n  return new Promise(resolve => setTimeout(resolve, ms));\n};\n"],"sourceRoot":""}